#!/usr/bin/env ruby

require "optparse"
require 'omf_rc'
require 'omf_rc/resource_factory'
require 'omf_rc_openflow'

$stdout.sync = true

options = {
  uid: `hostname`.chomp
}

executable_name = File.basename($PROGRAM_NAME)

opt_parser = OptionParser.new do |opts|
  opts.banner = "usage: #{executable_name} [options]"

  opts.on("-u USER", "Username") do |user|
    options[:user] = user
  end

  opts.on("-p PASSWORD", "Password") do |password|
    options[:password] = password
  end

  opts.on("-s SERVER", "PubSub server") do |server|
    options[:server] = server
  end

  opts.on("-t TOPIC", "PubSub topic to create, also becomes the uid of the resource, default to hostname") do |topic|
    options[:uid] = topic
  end

  opts.on("-d", "--debug", "Debug mode") do
    options[:debug] = true
  end

  opts.on("-l LOG_FILE_DIR", "Write log file to this folder") do |file_dir|
    options[:log_file_dir] = file_dir
  end
end

opt_parser.parse!

unless options[:server] && options[:user] && options[:password]
  puts "Error: Missing parameters to connect to a PubSub Server (see --help)"
  exit(1)
end

Logging.logger.root.level = :debug if options[:debug]

options[:environment] = :production
options[:environment] = :development if options[:debug]
if options[:log_file_dir] && File.exist?(options[:log_file_dir])
  Logging.logger.root.add_appenders(
    Logging.appenders.file(
      "#{options[:log_file_dir]}/omf_rc.log",
      :layout => Logging.layouts.pattern(:date_pattern => '%F %T %z',
                                         :pattern => '[%d] %-5l %c: %m\n')))
end

if options[:user]
  common_options = {communication: { url: "xmpp://#{options[:user]}:#{options[:password]}@#{options[:server]}"}}
else
  common_options = {}
end

resource_options = {
  uid: options[:uid]
}

OmfCommon.init(options[:environment].to_sym, common_options) do |el|
  info "Starting OMF Resource Controller for OpenFlow Slice factory (FlowVisor)"

  OmfCommon.comm.on_connected do |comm|
    info "Connected as #{comm.jid}" if comm.jid
    res = OmfRc::ResourceFactory.create(:openflow_slice_factory, resource_options)

    comm.on_interrupted { res.disconnect }
  end
end
